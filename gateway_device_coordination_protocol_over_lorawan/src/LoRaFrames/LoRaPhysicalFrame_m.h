//
// Generated file, do not edit! Created by nedtool 6.0 from src/LoRaFrames/LoRaPhysicalFrame.msg.
//

#ifndef __LORAPHYSICALFRAME_M_H
#define __LORAPHYSICALFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class LoRaPhysicalFrame;
/**
 * Class generated from <tt>src/LoRaFrames/LoRaPhysicalFrame.msg:1</tt> by nedtool.
 * <pre>
 * packet LoRaPhysicalFrame
 * {
 *     uint32_t preamble;     // Actually it is of 8 symbols
 *     uint16_t syncWord;     // Actually it is of 4.25 symbols
 *     uint8_t payloadLength; // Actually it is of 8 symbols	|
 *     uint8_t FECRate;       // Forward Error Correction rate | => Header (8 simbols size)
 *     bool CRCPresence;	   //							    |
 *     uint16_t headerCRC;    // Cyclic Redundancy Check
 * 
 *     // ======================
 *     // These parameters are not explicitly present in the physical frame
 *     uint8_t transmissionPower;
 *     float channelFrequency;
 *     uint8_t codingRate;
 *     uint8_t spreadingFactor;
 *     float bandwidth;
 *     bool IQPolarizationInverted;
 *     // ======================
 * 
 *     uint8_t payload[59];   // App payload based on data rate and region specs (min 11 bytes)
 *     uint16_t payloadCRC;   // Cyclic Redundancy Check
 * }
 * </pre>
 */
class LoRaPhysicalFrame : public ::omnetpp::cPacket
{
  protected:
    uint32_t preamble = 0;
    uint16_t syncWord = 0;
    uint8_t payloadLength = 0;
    uint8_t FECRate = 0;
    bool CRCPresence = false;
    uint16_t headerCRC = 0;
    uint8_t transmissionPower = 0;
    float channelFrequency = 0;
    uint8_t codingRate = 0;
    uint8_t spreadingFactor = 0;
    float bandwidth = 0;
    bool IQPolarizationInverted = false;
    uint8_t payload[59] = {0};
    uint16_t payloadCRC = 0;

  private:
    void copy(const LoRaPhysicalFrame& other);

  protected:
    bool operator==(const LoRaPhysicalFrame&) = delete;

  public:
    LoRaPhysicalFrame(const char *name=nullptr, short kind=0);
    LoRaPhysicalFrame(const LoRaPhysicalFrame& other);
    virtual ~LoRaPhysicalFrame();
    LoRaPhysicalFrame& operator=(const LoRaPhysicalFrame& other);
    virtual LoRaPhysicalFrame *dup() const override {return new LoRaPhysicalFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getPreamble() const;
    virtual void setPreamble(uint32_t preamble);
    virtual uint16_t getSyncWord() const;
    virtual void setSyncWord(uint16_t syncWord);
    virtual uint8_t getPayloadLength() const;
    virtual void setPayloadLength(uint8_t payloadLength);
    virtual uint8_t getFECRate() const;
    virtual void setFECRate(uint8_t FECRate);
    virtual bool getCRCPresence() const;
    virtual void setCRCPresence(bool CRCPresence);
    virtual uint16_t getHeaderCRC() const;
    virtual void setHeaderCRC(uint16_t headerCRC);
    virtual uint8_t getTransmissionPower() const;
    virtual void setTransmissionPower(uint8_t transmissionPower);
    virtual float getChannelFrequency() const;
    virtual void setChannelFrequency(float channelFrequency);
    virtual uint8_t getCodingRate() const;
    virtual void setCodingRate(uint8_t codingRate);
    virtual uint8_t getSpreadingFactor() const;
    virtual void setSpreadingFactor(uint8_t spreadingFactor);
    virtual float getBandwidth() const;
    virtual void setBandwidth(float bandwidth);
    virtual bool getIQPolarizationInverted() const;
    virtual void setIQPolarizationInverted(bool IQPolarizationInverted);
    virtual size_t getPayloadArraySize() const;
    virtual uint8_t getPayload(size_t k) const;
    virtual void setPayload(size_t k, uint8_t payload);
    virtual uint16_t getPayloadCRC() const;
    virtual void setPayloadCRC(uint16_t payloadCRC);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LoRaPhysicalFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LoRaPhysicalFrame& obj) {obj.parsimUnpack(b);}

#endif // ifndef __LORAPHYSICALFRAME_M_H


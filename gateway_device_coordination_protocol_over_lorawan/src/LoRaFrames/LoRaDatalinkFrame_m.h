//
// Generated file, do not edit! Created by nedtool 6.0 from src/LoRaFrames/LoRaDatalinkFrame.msg.
//

#ifndef __LORADATALINKFRAME_M_H
#define __LORADATALINKFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class LoRaDatalinkFrame;
/**
 * Class generated from <tt>src/LoRaFrames/LoRaDatalinkFrame.msg:1</tt> by nedtool.
 * <pre>
 * packet LoRaDatalinkFrame
 * {
 *     uint8_t FType;       // Actually it is of 3 bits
 *     uint8_t RFU;         // Actually it is of 3 bits
 *     uint8_t major;       // Actually it is of 2 bits
 *     uint8_t payload[19]; // App payload based on data rate and region specs (min 11 bytes) + 8 bytes header
 *     uint8_t MIC[4];      // Message Integrity Code
 * }
 * </pre>
 */
class LoRaDatalinkFrame : public ::omnetpp::cPacket
{
  protected:
    uint8_t FType = 0;
    uint8_t RFU = 0;
    uint8_t major = 0;
    uint8_t payload[19] = {0};
    uint8_t MIC[4] = {0};

  private:
    void copy(const LoRaDatalinkFrame& other);

  protected:
    bool operator==(const LoRaDatalinkFrame&) = delete;

  public:
    LoRaDatalinkFrame(const char *name=nullptr, short kind=0);
    LoRaDatalinkFrame(const LoRaDatalinkFrame& other);
    virtual ~LoRaDatalinkFrame();
    LoRaDatalinkFrame& operator=(const LoRaDatalinkFrame& other);
    virtual LoRaDatalinkFrame *dup() const override {return new LoRaDatalinkFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getFType() const;
    virtual void setFType(uint8_t FType);
    virtual uint8_t getRFU() const;
    virtual void setRFU(uint8_t RFU);
    virtual uint8_t getMajor() const;
    virtual void setMajor(uint8_t major);
    virtual size_t getPayloadArraySize() const;
    virtual uint8_t getPayload(size_t k) const;
    virtual void setPayload(size_t k, uint8_t payload);
    virtual size_t getMICArraySize() const;
    virtual uint8_t getMIC(size_t k) const;
    virtual void setMIC(size_t k, uint8_t MIC);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LoRaDatalinkFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LoRaDatalinkFrame& obj) {obj.parsimUnpack(b);}

#endif // ifndef __LORADATALINKFRAME_M_H


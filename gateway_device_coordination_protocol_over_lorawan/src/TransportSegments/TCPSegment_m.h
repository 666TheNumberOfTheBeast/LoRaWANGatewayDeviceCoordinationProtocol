//
// Generated file, do not edit! Created by nedtool 6.0 from src/TransportSegments/TCPSegment.msg.
//

#ifndef __TCPSEGMENT_M_H
#define __TCPSEGMENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class TCPSegment;
/**
 * Class generated from <tt>src/TransportSegments/TCPSegment.msg:1</tt> by nedtool.
 * <pre>
 * packet TCPSegment
 * {
 *     uint16_t srcPort;
 *     uint16_t destPort;
 *     uint32_t sequenceNumber;
 *     uint32_t ACKnumber;
 *     uint8_t dataOffset; // Actually it is of 4 bits
 *     uint8_t reserved; 	// Actually it is of 3 bits
 *     bool NS;  // ECN-nonce
 *     bool CWR; // Congestion window reduced
 *     bool ECE; // ECN-Echo
 *     bool URG; // Indicates that the Urgent pointer field is significant
 *     bool ACK; // Indicates that the Acknowledgment field is significant
 *     bool PSH; // Push function
 *     bool RST; // Reset the connection
 *     bool SYN; // Synchronize sequence numbers
 *     bool FIN; // Last packet from sender
 *     uint16_t windowSize;
 *     uint16_t checksum;
 *     uint16_t urgentPointer;
 *     uint8_t options[40];
 *     //uint8_t payload[65536];
 * }
 * </pre>
 */
class TCPSegment : public ::omnetpp::cPacket
{
  protected:
    uint16_t srcPort = 0;
    uint16_t destPort = 0;
    uint32_t sequenceNumber = 0;
    uint32_t ACKnumber = 0;
    uint8_t dataOffset = 0;
    uint8_t reserved = 0;
    bool NS = false;
    bool CWR = false;
    bool ECE = false;
    bool URG = false;
    bool ACK = false;
    bool PSH = false;
    bool RST = false;
    bool SYN = false;
    bool FIN = false;
    uint16_t windowSize = 0;
    uint16_t checksum = 0;
    uint16_t urgentPointer = 0;
    uint8_t options[40] = {0};

  private:
    void copy(const TCPSegment& other);

  protected:
    bool operator==(const TCPSegment&) = delete;

  public:
    TCPSegment(const char *name=nullptr, short kind=0);
    TCPSegment(const TCPSegment& other);
    virtual ~TCPSegment();
    TCPSegment& operator=(const TCPSegment& other);
    virtual TCPSegment *dup() const override {return new TCPSegment(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint16_t getSrcPort() const;
    virtual void setSrcPort(uint16_t srcPort);
    virtual uint16_t getDestPort() const;
    virtual void setDestPort(uint16_t destPort);
    virtual uint32_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint32_t sequenceNumber);
    virtual uint32_t getACKnumber() const;
    virtual void setACKnumber(uint32_t ACKnumber);
    virtual uint8_t getDataOffset() const;
    virtual void setDataOffset(uint8_t dataOffset);
    virtual uint8_t getReserved() const;
    virtual void setReserved(uint8_t reserved);
    virtual bool getNS() const;
    virtual void setNS(bool NS);
    virtual bool getCWR() const;
    virtual void setCWR(bool CWR);
    virtual bool getECE() const;
    virtual void setECE(bool ECE);
    virtual bool getURG() const;
    virtual void setURG(bool URG);
    virtual bool getACK() const;
    virtual void setACK(bool ACK);
    virtual bool getPSH() const;
    virtual void setPSH(bool PSH);
    virtual bool getRST() const;
    virtual void setRST(bool RST);
    virtual bool getSYN() const;
    virtual void setSYN(bool SYN);
    virtual bool getFIN() const;
    virtual void setFIN(bool FIN);
    virtual uint16_t getWindowSize() const;
    virtual void setWindowSize(uint16_t windowSize);
    virtual uint16_t getChecksum() const;
    virtual void setChecksum(uint16_t checksum);
    virtual uint16_t getUrgentPointer() const;
    virtual void setUrgentPointer(uint16_t urgentPointer);
    virtual size_t getOptionsArraySize() const;
    virtual uint8_t getOptions(size_t k) const;
    virtual void setOptions(size_t k, uint8_t options);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TCPSegment& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TCPSegment& obj) {obj.parsimUnpack(b);}

#endif // ifndef __TCPSEGMENT_M_H

